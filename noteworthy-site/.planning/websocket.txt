# WebSocket Implementation Plan for Real-time LaTeX Generation Streaming

## Overview
This document outlines the plan to implement WebSocket-based streaming for the LaTeX generation endpoint to resolve the Vercel timeout issues (60 seconds) and provide a better user experience with real-time progress updates. We'll modify the existing architecture to stream Gemini AI generation results to users as they're being produced, rather than waiting for the entire process to complete before sending a response.

## Goals
1. Avoid Vercel timeout limitations for the LaTeX generation endpoint
2. Provide users with real-time feedback during LaTeX generation
3. Display incoming LaTeX content in a transparent overlay box
4. Show "Thinking..." indicator when no content has been generated yet
5. Maintain a responsive and engaging user experience

## Files to Modify

### Backend Changes

1. **src/app/api/latex/generate/route.ts** (or similar endpoint file)
   - Convert from standard REST API to WebSocket-compatible endpoint
   - Modify to stream generation results instead of waiting for completion
   - Implement progress tracking and status updates

2. **server.js**
   - Add WebSocket server integration (using Socket.IO)
   - Configure WebSocket event handlers and middleware
   - Set up appropriate error handling and reconnection logic

3. **New File: src/lib/websocket.ts**
   - Create WebSocket utility functions and configuration
   - Define message types and event handlers
   - Implement authentication and security measures

### Frontend Changes

4. **src/components/Convert/index.tsx** (or similar component)
   - Add WebSocket connection logic
   - Create UI for displaying streaming results
   - Implement transparent overlay for showing incoming LaTeX
   - Add "Thinking..." state and animations

5. **src/hooks/useWebSocket.ts**
   - Create custom hook for WebSocket connection management
   - Handle connection status, reconnection, and message parsing
   - Provide methods for sending generation requests

6. **src/components/StreamingOverlay.tsx** (new)
   - Create transparent overlay component
   - Implement auto-scrolling content display
   - Add visual styling for streaming text

## Implementation Steps

### Phase 1: Backend WebSocket Setup

1. Install required dependencies:
   - socket.io
   - socket.io-client
   - @types/socket.io (for TypeScript)

2. Modify server.js to integrate Socket.IO:
   - Initialize Socket.IO server
   - Configure CORS and other security settings
   - Set up connection event handlers

3. Create WebSocket utility library:
   - Define message types and structures
   - Implement authentication middleware
   - Create helper functions for connection management

4. Adapt LaTeX generation endpoint:
   - Modify Gemini API integration to use streaming
   - Implement progress tracking logic
   - Create event emitters for different generation stages

### Phase 2: Frontend WebSocket Integration

5. Create useWebSocket custom hook:
   - Implement connection management
   - Add message handling and state management
   - Create convenience methods for common operations

6. Develop StreamingOverlay component:
   - Create transparent UI element
   - Implement auto-scrolling text display
   - Add "Thinking..." animation state

7. Integrate WebSocket in LatexGenerator component:
   - Replace REST API calls with WebSocket events
   - Add UI state for connection status
   - Implement error handling and retry logic

### Phase 3: User Experience Refinements

8. Add visual indicators:
   - Progress percentage display
   - Connection status indicator
   - Estimated time remaining calculation

9. Improve error handling:
   - Connection loss recovery
   - Fallback to traditional REST API if WebSockets fail
   - Detailed error messages and recovery suggestions

10. Optimize performance:
    - Buffer messages to reduce UI updates
    - Implement throttling for high-frequency updates
    - Add connection quality awareness

## Deployment Considerations

1. Vercel WebSocket Support:
   - Investigate compatibility with Vercel serverless functions
   - Consider using Vercel Edge Functions for WebSocket support
   - Evaluate need for separate WebSocket server deployment

2. Alternative Deployment Options:
   - Standalone WebSocket server on a VPS/cloud provider
   - WebSocket service providers (Pusher, Ably, etc.)
   - Hybrid approach with separate WebSocket server

3. Scaling Considerations:
   - Connection pooling and management
   - Load balancing for multiple instances
   - Resource utilization and optimization

## Testing Strategy

1. Component Level:
   - Unit tests for WebSocket utilities
   - Component tests for StreamingOverlay
   - Mock WebSocket server for frontend testing

2. Integration Testing:
   - End-to-end tests for complete generation flow
   - Simulated slow/unstable connections
   - Load testing with multiple simultaneous users

3. Performance Benchmarks:
   - Memory usage during streaming
   - Time to first byte comparison
   - Overall completion time metrics

## Rollout Plan

1. Develop and test locally
2. Deploy to staging environment
3. Conduct limited beta testing
4. Roll out to production with feature flag
5. Monitor for issues and gradually increase availability
6. Full deployment once stability is confirmed

## Success Metrics

1. Elimination of timeout errors
2. Reduced perceived latency for users
3. Higher completion rate for LaTeX generation
4. Improved user satisfaction with feedback
5. Reduced server load from repeated requests

## Future Enhancements

1. Multi-device synchronization
2. Generation pause/resume functionality
3. Template-based generation optimization
4. Offline queuing for connection issues
5. Advanced progress visualization

## Implementation Notes & Modifications

1. **Gemini Integration Modification**:
   - Added a callback parameter to the Gemini integration function to support streaming
   - Implemented approximate progress calculation based on chunk counting
   - Modified the export mechanism to use only CommonJS (removed ES module export) to fix compatibility issues
   - Fixed center figures command in LaTeX instruction string (corrected \begin{center} end{center} to \begin{center} \end{center})

2. **WebSocket Utility Structure**:
   - Implemented as a singleton pattern to ensure only one WebSocket server instance
   - Added file handling directly in the WebSocket handler to simplify the workflow
   - Implemented status updates with specific status types: 'thinking', 'processing', 'complete', 'error'
   - Created both TypeScript (.ts) and JavaScript (.js) versions of the utility for proper compatibility

3. **TypeScript/JavaScript Compatibility Issues**:
   - Created a JavaScript version (websocket.js) for Node.js server imports to avoid TypeScript compilation issues
   - Updated server.js to import the JavaScript version with explicit .js extension
   - Added proper TypeScript type declarations for the streamCallback parameter
   - Fixed TypeScript type errors with null/undefined content checks

4. **Frontend Implementation**:
   - Created a custom hook (useWebSocket) that manages connection state
   - Built a standalone StreamingOverlay component that shows real-time updates
   - Modified the Convert component to use WebSockets while maintaining compatibility with the existing API
   - Added support for File to ArrayBuffer conversion for WebSocket transmission
   - Added null check for latexStatus.content to prevent TypeScript errors

5. **Error Handling Improvements**:
   - Added comprehensive error states in both the backend and frontend
   - Implemented cleanup functionality for temporary files
   - Added connection recovery logic in the WebSocket hook

6. **Progress Tracking**:
   - Implemented a simple progress estimation based on chunk count
   - Added visual progress indicator in the StreamingOverlay component
   - Used animation for the "thinking" state to improve perceived responsiveness

7. **Module System Compatibility**:
   - Fixed dual module system export issues in geminiIntegration.js by using only CommonJS exports
   - Created proper TypeScript type definitions using module augmentation
   - Ensured Node.js can properly import the WebSocket utilities without TypeScript compilation
